executors:
  nodeaws-executor:
    docker:
      - image: ns8inc/nodeaws:node-erbium
jobs:
  deploy_dev:
    executor: nodeaws-executor
    steps:
      - checkout
      - run:
          command: echo "//registry.npmjs.org/:_authToken=${NS8_GLOBAL_NPM_TOKEN}" > ~/.npmrc
          name: Configure NPM
      - run:
          command: yarn
          name: Install Dependencies
      - run:
          command: yarn build
          name: Build for Production
      - assume-role/assume-role:
          account-id: "529464811624"
          role-name: circle-ci-role
      - run:
          command: aws s3 cp --acl private --content-type application/javascript dist/protect.min.js s3://protect-sdk-client/assets/js/protect-dev.min.js
          name: Deploy to S3 (dev)
  deploy_prod:
    executor: nodeaws-executor
    steps:
      - checkout
      - run:
          command: echo "//registry.npmjs.org/:_authToken=${NS8_GLOBAL_NPM_TOKEN}" > ~/.npmrc
          name: Configure NPM
      - run:
          command: yarn
          name: Install Dependencies
      - run:
          command: yarn build
          name: Build for Production
      - run:
          command: |
            git config user.email noreply@ns8.com
            git config user.name 'CircleCI'
          name: Setup Git
      - run:
          command: |
            yarn config set version-tag-prefix ''
            current_version="$(jq -r .version package.json)"

            while
              new_version="$(jq -r .version package.json)"
              [[ "$(git tag | grep -c $new_version)" -gt "0" ]]
            do yarn version --no-git-tag-version --patch; done

            if [ "$new_version" = "$current_version" ]; then
              # Someone manually bumped the version in package.json, so don't bump, only tag.
              git tag $new_version
            else
              # Reset then bump and tag like usual.
              git checkout package.json
              yarn version --new-version $new_version
            fi
          name: Bump Version
      - run:
          command: |
            if ! git push -u origin master --tags; then
              echo "Push failed. Please add this CircleCI deploy key to your repo with write access:"
              ssh-keygen -y -f ~/.ssh/id_rsa
              exit 1
            fi
          name: Tag Release in GitHub
      - run:
          command: |
            version="$(jq -r .version package.json)"
            echo "export VERSION=$version" >> $BASH_ENV
          name: Get Version
      - assume-role/assume-role:
          account-id: "529464811624"
          role-name: circle-ci-role
      - run:
          command: aws s3 cp --acl private --content-type application/javascript dist/protect.min.js s3://protect-sdk-client/assets/js/protect.min.js
          name: Deploy to S3 (prod)
      - run:
          command: aws s3 cp --acl private --content-type application/javascript dist/protect.min.js s3://protect-sdk-client/assets/js/protect-${VERSION}.min.js
          name: Deploy to S3 (prod, versioned)
  publish:
    executor: nodeaws-executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - "03:a4:f7:67:d3:99:d1:d3:a1:91:25:c0:8c:09:dc:8e"
      - checkout
      - run:
          command: echo "//registry.npmjs.org/:_authToken=${NS8_GLOBAL_NPM_TOKEN}" > ~/.npmrc
          name: Configure NPM
      - run:
          command: yarn
          name: Install Dependencies
      - run:
          command: yarn build
          name: Build for Production
      - run:
          command: npm publish
          name: Publish
      - run:
          command: yarn docs:publish
          name: Publish API to GitHub Pages
      - run:
          command: |
            version=$(jq -r .version package.json)
            echo "export VERSION=$version" >> $BASH_ENV
          name: Get Version
      - run:
          command: |
            yarn gren release -m -t $VERSION -T $GITHUB_ACCESS_TOKEN
            yarn gren release -o -t $VERSION -T $GITHUB_ACCESS_TOKEN
          name: Create GitHub Release
  test:
    executor: nodeaws-executor
    steps:
      - checkout
      - run:
          command: echo "//registry.npmjs.org/:_authToken=${NS8_GLOBAL_NPM_TOKEN}" > ~/.npmrc
          name: Configure NPM
      - run:
          command: yarn
          name: Install Dependencies
      - run:
          command: yarn lint
          name: Lint
      - run:
          command: yarn test
          name: Run Tests
orbs:
  assume-role: airswap/assume-role@0.2.0
version: 2.1
workflows:
  publish:
    jobs:
      - publish:
          context: org-global
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/
  test_and_deploy:
    jobs:
      - test:
          context: org-global
          filters:
            branches:
              ignore: gh-pages
      - deploy_dev:
          context: org-global
          filters:
            branches:
              only: master
          requires:
            - test
      - approve:
          context: org-global
          filters:
            branches:
              only: master
          requires:
            - test
          type: approval
      - deploy_prod:
          context: org-global
          filters:
            branches:
              only: master
          requires:
            - approve
